{"name":"Edit","tagline":"Edit Scripting Language","body":"## ABOUT\r\nEdit is a scripting language I've developed with syntax similar to a combination of Java, Lua, and Python. Functionality includes call to functions with return values and the ability to evaluate complex expressions. I created it for many reasons including, practice coding, learn about the challenges that developing languages face, extend the functionality to be able to one day use it in an application, and to practice some concepts I've learned in class such as using trees, stacks, and maps.\r\n\r\nUse EditDemo.java to run\r\n\r\n## Upcoming\r\nMaking the language objective is the next step I want to take. It shouldn't be too hard considering that I learned how to keep separate functions on different stacks with their own maps of variables and values. The way I plan to achieve this is to parse all the necessary files before the program executes and storing it in a map, and when a new Object is created, a new instance of that compilation would be added to the current program stack. This works great because each pared file can store its own values for variables and return values when it's functions are called.\r\n\r\n## INPUT\r\nThis is currently the extent of it's functionality:\r\n\r\n```\r\n\r\n#This will be ignored\r\n\r\nprint \"this tests the evaluator\"\r\n\r\nfunction ending(x) do\r\n\tx = plusOne(x)\r\n\twhile x > 0 do\r\n\t\tprint \"This will print at the end x + 1 times\"\r\n\t\tx = x - 1\r\n\tend\r\nend\r\n\r\nfunction plusOne(x) do\r\n\twhile true do\r\n\t\t\r\n\t\treturn x + 1\r\n\r\n\t\tprint \"This is unreachable code\"\r\n\tend\r\n\tif not false then\r\n\t\tprint \"This is also unreachable\"\r\n\tend\r\nend\r\n\r\nprint #This will be ignored\r\n\r\nx = 6\r\n\r\nif x < 4 then\r\n\tprint \"This won't print\"\r\nelse if x == 5 then\r\n\tprint \"This won't print either\" \r\nelse\r\n\tprint \"This will print\" #This will be ignored\r\nend\r\n\r\nprint true and false\r\nprint true or false\r\nprint true xand false\r\nprint true xor false\r\nprint not true\r\n\r\nprint\r\n\r\n#This will be ignored\r\n\r\nprint \"This is a\" , \"comma.\"\r\nprint \"This is a\" ; \"semi-colon.\"\r\n\r\nprint\r\n\r\ninput \"Pick a val for x: \", x\r\n\r\nprint\r\n\r\nprint 2 + x * -2\r\nprint 2 - x / 2\r\nprint x ^ 3 % 7\r\nprint \"hello\" + \" \" + \"world\"\r\n\r\nprint\r\n\r\nprint 2 > x or false\r\nprint 2 < x or false\r\nprint 2 <= x and true\r\nprint 2 >= x and true\r\nprint 2 == x and true\r\n\r\nprint\r\n\r\nif x > 0 then\r\n\tfor i = 0, i < x, i + 1 do\r\n\t\tprint i\r\n\tend\r\nelse\r\n\twhile x < 0 do\r\n\t\tprint x\r\n\t\tx = x + 1\r\n\tend\r\nend\r\n\r\nprint\r\n\r\nending(x)\r\n\r\n#This will be ignored\r\n```\r\n\r\n## OUTPUT\r\n\r\n```\r\nThis will print\r\nfalse\r\ntrue\r\nfalse\r\ntrue\r\nfalse\r\n\r\nThis is a comma.\r\nThis is a       semi-colon.\r\n\r\nPick a val for x: 5\r\n\r\n-8.0\r\n-0.5\r\n6.0\r\nhello world\r\n\r\nfalse\r\ntrue\r\ntrue\r\nfalse\r\nfalse\r\n\r\n0.0\r\n1.0\r\n2.0\r\n3.0\r\n4.0\r\n\r\nThis will print at the end x + 1 times\r\nThis will print at the end x + 1 times\r\nThis will print at the end x + 1 times\r\nThis will print at the end x + 1 times\r\nThis will print at the end x + 1 times\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}